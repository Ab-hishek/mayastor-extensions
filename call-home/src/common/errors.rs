use serde_json::Error;
use snafu::{Snafu};

///Contains Errors that may generate while execution of k8s_client
#[derive(Debug, Snafu)]
#[snafu(visibility(pub), context(suffix(false)))]
#[allow(clippy::enum_variant_names)]
pub enum K8sResourceError {
    #[snafu(display("Json Parse Error : {}", source))]
    SerdeError {
        source: serde_json::Error,
    },
    #[snafu(display("K8Client Error: {}", source))]
    ClientError {
        source: kube::Error,
    },
}

impl From<kube::Error> for K8sResourceError {
    fn from(source: kube::Error) -> Self {
        Self::ClientError{source}
    }
}

impl From<Error> for K8sResourceError {
    fn from(source: Error) -> Self {
        Self::SerdeError{source}
    }
}

///HttpClientError contains the error that may generate while execution of HttpClient
#[derive(Debug, Snafu)]
#[allow(clippy::enum_variant_names)]
pub enum HttpClientError {
    /// Error generated when we don't get a status code between 200-299
    #[snafu(display("Http Error : {}",name))]
    HttpError {
        name: String,
    },
    /// Error generated during serialization of json
    #[snafu(display("Json Parse Error : {}", source))]
    SerdeError {
        source: serde_json::Error,
    },
    /// Error generated by reqwest client
    #[snafu(display("Reqwest client error: {}", source))]
    ReqwestError {
        source: reqwest::Error,
    },
    /// Error generated during parsing of url
    #[snafu(display("Url Parse Error: {}", source))]
    ParseError {
        source: url::ParseError,
    },
}

impl From<String> for HttpClientError {
    fn from(name: String) -> Self {
        Self::HttpError{name}
    }
}
impl From<serde_json::Error> for HttpClientError {
    fn from(source: serde_json::Error) -> Self {
        Self::SerdeError{source}
    }
}

impl From<reqwest::Error> for HttpClientError {
    fn from(source: reqwest::Error) -> Self {
        Self::ReqwestError{source}
    }
}

impl From<url::ParseError> for HttpClientError {
    fn from(source: url::ParseError) -> Self {
        Self::ParseError {source}
    }
}
impl HttpClientError {
    /// Returns httpError from provided message
    pub fn invalid_http_response_error(name: String) -> Self {
        Self::HttpError{name}
    }
}